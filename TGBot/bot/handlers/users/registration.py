import re

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from TGBot.bot.keyboards.user import main_keyboard
from TGBot.bot.states.user import Registration
from TGBot.bot.utils.models_complete import complete_user_registration
from TGBot.bot.utils.validators import check_correct_name, is_valid_phone, is_valid_email

router = Router()
builder = InlineKeyboardBuilder()
builder.row(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip"))


@router.message(Registration.StartRegistration, F.text == '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è')
async def start_registration(message: types.Message, state: FSMContext):
    await message.bot.send_message(message.from_user.id, "üë§ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è")
    await state.set_state(Registration.Name)


@router.message(Registration.Name, F.text)
async def name_registration(message: types.Message, state: FSMContext):
    name = message.text
    is_correct = await check_correct_name(name)
    if message.text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è":
        is_correct = False
    if not is_correct:
        await message.bot.send_message(message.from_user.id,
                                       "–Ü–º'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –≤ —Å–æ–±—ñ –±—É–¥—å-—è–∫—ñ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏.\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
    else:
        await state.update_data(name=name)
        await message.bot.send_message(message.from_user.id, "üìû –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        await state.set_state(Registration.Phone)


@router.message(Registration.Phone, F.text)
async def phone_registration(message: types.Message, state: FSMContext):
    phone = message.text
    is_correct = await is_valid_phone(phone)
    print(phone)
    if not is_correct:
        await message.bot.send_message(message.from_user.id,
                                       "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
    else:
        print(f"{phone}---+")
        await state.update_data(phone=phone)
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip")
        )
        await message.bot.send_message(message.from_user.id, "üì±‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π e-mail")
        await state.set_state(Registration.Mail)


@router.message(Registration.Mail, F.text)
async def mail_registration(message: types.Message, state: FSMContext):
    mail = message.text
    is_correct = await is_valid_email(mail)
    if not is_correct:
        await message.bot.send_message(message.from_user.id,
                                       "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –ø–æ—à—Ç–∏.\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
    else:
        await state.update_data(mail=mail)
        await message.bot.send_message(message.from_user.id, "üì± –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π instagram",
                                       reply_markup=builder.as_markup())
        await state.set_state(Registration.Instagram)


@router.message(Registration.Instagram, F.text)
async def instagram_registration(message: types.Message, state: FSMContext):
    instagram = message.text
    await state.update_data(instagram=instagram)
    user = await state.get_data()
    await complete_user_registration(user_id=message.from_user.id, username=message.from_user.username,
                                     name=user["name"], phone=user["phone"], mail=user["mail"],
                                     instagram=user["instagram"])
    await message.bot.send_message(message.from_user.id, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=main_keyboard)
    await state.clear()


@router.callback_query(Registration.Instagram, F.data == "skip")
async def instagram_mail_registration(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(instagram=None)
    user = await state.get_data()
    await complete_user_registration(user_id=callback.from_user.id, username=callback.from_user.username,
                                     name=user["name"], phone=user["phone"], mail=user["mail"],
                                     instagram=user["instagram"])
    await callback.bot.send_message(callback.from_user.id, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=main_keyboard)
    await callback.answer()
    await state.clear()
