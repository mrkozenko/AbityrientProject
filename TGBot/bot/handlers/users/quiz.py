from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from django.db.models import Q

from Quiz.models import Quiz as qz
from TGBot.bot.handlers.users.main_dialog import do_start
from TGBot.bot.keyboards.user import main_keyboard
from TGBot.bot.states.user import Quiz
from TGBot.bot.utils.models_complete import complete_quiz
from TGBot.models import TGUser

router = Router()
import re
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

router = Router()
builder = InlineKeyboardBuilder()
builder.row(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip"))


# –±—É–¥–µ—Ç 3 –±–ª–æ–∫–∞, –ø–µ—Ä–≤—ã–π –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω, –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫,
# 3-–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–Ω–ª–∞–π–Ω —Ö–µ–Ω—Ä–¥–µ–ª
@router.message(F.text == 'üèÜ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∏')
async def list_quizes(message: types.Message):
    user =TGUser.objects.get_or_none(pk=message.from_user.id)
    quizes_btns = InlineKeyboardBuilder()
    quizes = qz.objects.filter(
        Q(result__user__isnull=True) | ~Q(result__user=user),
        is_show=True
    ).order_by('-created')
    if quizes.count() > 0:
        for quize in quizes:
            quizes_btns.row(types.InlineKeyboardButton(text=f"{quize.title}", callback_data=f"quiz:{quize.id}"))

        await message.bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–∫—Ç–æ—Ä–∏–Ω",
                                       reply_markup=quizes_btns.as_markup())
    else:
        await message.bot.send_message(message.from_user.id, "–î–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–∫—Ç–æ—Ä–∏–Ω —â–µ –Ω–µ–º–∞!")


@router.callback_query(StateFilter(None), F.data.contains("quiz"))
async def quiz_run(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    quiz_bank = await state.get_data()
    quiz_id = callback.data.split(":")[1]
    print(quiz_id)
    current_quiz: qz = qz.objects.filter(pk=quiz_id, is_show=True).first()
    print(current_quiz)
    print("s")
    # question structure - {question}
    quiz_structure = {"quiz_id": quiz_id, "questions": [], "score": 0, "current_question": None,"current_step":None}
    if current_quiz:
        list_questions = current_quiz.get_questions()
        for question in list_questions:
            print(question.id)
            print(question.question_text)
            answers = question.get_answers()
            if quiz_structure["current_question"] is None:
                quiz_structure["current_question"] = question.id
            if quiz_structure["current_step"] is None:
                quiz_structure["current_step"] = question.score_value
            # for temp save question before added to list
            temp_question_structure = {
                "id": question.id,
                "question_text": question.question_text,
                "answers": []
            }
            for answer in answers:
                print(answer.answer_text)
                print(answer.is_correct)
                temp_question_structure["answers"].append({"text": answer.answer_text, "is_correct": answer.is_correct})
            quiz_structure["questions"].append(temp_question_structure)
            await state.update_data(quiz_structure=quiz_structure)
        await state.set_state(Quiz.AnswerProcess)
        mess, keyboard = await build_question(quiz_structure)
        mess = f"–©–æ –∂ –ø–æ—á–Ω–µ–º–æ!\n–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /start\n"+mess
        await callback.bot.send_message(callback.from_user.id,text = mess, reply_markup=keyboard,parse_mode=ParseMode.HTML )
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–µ–π—Ç–µ, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–∏–Ω–µ —á—Ç–æ –æ–ø—Ä–æ—Å –Ω–∞—á–∞—Ç.
        # —Å–¥–µ–ª–∞—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—É–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–æ–≤ –∏ –∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Ç–æ
        # –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–¥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–∏–¥–∞—Ç—å —é–∑–µ—Ä—É —Å—Ç–∏–∫–µ—Ä
    else:
        await callback.answer(show_alert=True, text="–°—Ö–æ–∂–µ, —â–æ —Ü—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å –∞–±–æ –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–æ—é.")
    await callback.answer()
    # –∑–∞–≥—Ä—É–∑–∫–∞ –∫–≤–∏–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—á–æ –æ–Ω –Ω–µ —Å–∫—Ä—ã—Ç. –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç —Ç–æ –æ—Ç–º–µ–Ω–∞.
    # –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ , —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞ —Ç–∞–∫ –∂–µ —Å—á–µ—Ç–∞


async def build_question(quiz_structure: dict):
    # create message with question and buttons
    message_text = ""
    question_text = quiz_structure["questions"][0]["question_text"]
    message_text += f"<b>{question_text}</b>"
    quiz_answers = InlineKeyboardBuilder()
    kb_main = []
    for answer in quiz_structure["questions"][0]["answers"]:
        kb_main.append([types.KeyboardButton(text=answer['text'])])
    main_keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb_main,
            resize_keyboard=True)
    return message_text,main_keyboard


@router.message(Quiz.AnswerProcess)
async def quiz_process(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await message.bot.send_message(message.from_user.id,text=f"–©–æ –∂, –¥—É–∂–µ —à–∫–æ–¥–∞, —â–æ —Ç–∏ –≤–∏—Ä—ñ—à–∏–≤ –ø—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–∞ –ø–æ–∫–∏–Ω—É—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É :(")
        await state.clear()
        await do_start(message, state)
    quiz_bank = await state.get_data()
    quiz_structure = quiz_bank["quiz_structure"]
    current_question = quiz_structure["current_question"]
    user_answer = message.text
    #await message.bot.delete_message(chat_id=callback.from_user.id,message_id=callback.message.message_id)
    q_index_del = None
    current_quesiton_dict = None
    for indx,quiz_question in enumerate(quiz_structure["questions"]):
        if quiz_question["id"] == current_question:
            q_index_del = indx
            current_quesiton_dict = quiz_question
            break
    for answer in current_quesiton_dict["answers"]:
        if answer["is_correct"] and message.text==answer["text"]:
            quiz_structure["score"] = quiz_structure["score"] + quiz_structure["current_step"]
            break
    del quiz_structure["questions"][q_index_del]

    if quiz_structure["questions"]:
        quiz_structure["current_question"] = quiz_structure["questions"][0]["id"]
        await state.update_data(quiz_structure=quiz_structure)
        mess, keyboard = await build_question(quiz_structure)
        await message.bot.send_message(message.from_user.id,text=mess, reply_markup=keyboard,parse_mode=ParseMode.HTML )
    else:

        print("send stiker it's all - save data")
        await complete_quiz(user_id=message.from_user.id,quiz_id=quiz_structure["quiz_id"],score=quiz_structure["score"])
        score = quiz_structure["score"]
        await message.bot.send_message(message.from_user.id,text=f"–î—è–∫—É—é, –∑–∞ —É—á–∞—Å—Ç—å —É –≤—ñ–∫—Ç–æ—Ä–∏–Ω—ñ, —Ç–∏ –≤–µ–ª–∏–∫–∏–π –º–æ–ª–æ–¥–µ—Ü—å!\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {score} üèÜ")
        await message.bot.send_sticker(message.from_user.id,
                                       sticker="CAACAgIAAxkBAAELpgpl7GXGxNwduEY9g7VpFNN-B-X-pwACqhgAAg9lCEoGzNzn0P2-0zQE",reply_markup=main_keyboard)
        await state.clear()
