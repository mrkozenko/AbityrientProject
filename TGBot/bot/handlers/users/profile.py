from aiogram import Router, types
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaPhoto, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from django.db.models import Min

from TGBot.bot.handlers.users.main_dialog import do_start
from TGBot.bot.states.user import ProfileUpdate
from TGBot.bot.utils.validators import check_correct_name, is_valid_phone, is_valid_email
from TGBot.models import TGUser

router = Router()

builder = InlineKeyboardBuilder()
builder.row(types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", callback_data="change_name"))
builder.row(types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change_phone"))
builder.row(types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—à—Ç—É", callback_data="change_mail"))
builder.row(types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ instagram", callback_data="change_instagram"))

no_keyboard = InlineKeyboardBuilder()
no_keyboard.row(types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="NO"))


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ—ñ–ª—å")
async def show_specialty_menu(message: types.Message, state: FSMContext):
    # –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    user: TGUser = await TGUser.objects.filter(pk=message.from_user.id).afirst()
    if user:
        msg_template = f"""
–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
üë§ –Ü–º'—è: {user.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}
‚úâÔ∏è E-mail: {user.mail_address} 
üì± Instagram: {'–Ω–µ –≤–∫–∞–∑–∞–Ω–æ' if user.instagram_username is None else user.instagram_username}"""
        await message.bot.send_message(message.from_user.id, msg_template, reply_markup=builder.as_markup())


@router.callback_query(ProfileUpdate.UpdateField, F.data == "NO")
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await do_start(callback, state)


@router.callback_query(F.data.contains("change"))
async def name_change(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileUpdate.UpdateField)
    if callback.data == "change_name":
        await state.update_data(field_type="change_name")
        await callback.bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:",
                                        reply_markup=no_keyboard.as_markup())
    elif callback.data == "change_phone":
        await state.update_data(field_type="change_phone")
        await callback.bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
                                        reply_markup=no_keyboard.as_markup())
    elif callback.data == "change_mail":
        await state.update_data(field_type="change_mail")
        await callback.bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É:",
                                        reply_markup=no_keyboard.as_markup())
    elif callback.data == "change_instagram":
        await state.update_data(field_type="change_instagram")
        await callback.bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º:",
                                        reply_markup=no_keyboard.as_markup())
    await callback.answer()


@router.message(ProfileUpdate.UpdateField)
async def fields_change(message: types.Message, state: FSMContext):
    field_info = await state.get_data()
    if field_info.get("field_type", None) is None:
        await state.clear()
        return None
    field_type = field_info["field_type"]
    msg_text = message.text
    is_correct = None
    record: TGUser = TGUser.objects.filter(tg_id=message.from_user.id).first()
    if field_type == "change_name":
        is_correct = await check_correct_name(msg_text)
        if not is_correct:
            await message.bot.send_message(message.from_user.id,
                                           "–Ü–º'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –≤ —Å–æ–±—ñ –±—É–¥—å-—è–∫—ñ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏.\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
        else:
            record.name = msg_text
            record.save()
            await state.clear()
            await message.bot.send_message(message.from_user.id, "–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ ‚úÖ")
            await do_start(message, state)
    elif field_type == "change_phone":
        is_correct = await is_valid_phone(msg_text)
        if not is_correct:
            await message.bot.send_message(message.from_user.id,
                                           "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
        else:
            record.phone = msg_text
            record.save()
            await state.clear()
            await message.bot.send_message(message.from_user.id, "–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ ‚úÖ")
            await do_start(message, state)
    elif field_type == "change_mail":
        is_correct = await is_valid_email(msg_text)
        if not is_correct:
            await message.bot.send_message(message.from_user.id,
                                           "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –ø–æ—à—Ç–∏.\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
        else:
            record.mail_address = msg_text
            record.save()
            await state.clear()
            await message.bot.send_message(message.from_user.id, "–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ ‚úÖ")
            await do_start(message, state)
    elif field_type == "change_instagram":
        record.instagram_username = msg_text
        record.save()
        await state.clear()
        await message.bot.send_message(message.from_user.id, "–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ ‚úÖ")
        await do_start(message, state)
